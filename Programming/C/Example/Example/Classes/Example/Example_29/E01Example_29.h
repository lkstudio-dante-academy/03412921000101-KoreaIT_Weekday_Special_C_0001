#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 해시 테이블 (Hash Table) 이란?
* - 해시 값을 기반으로 데이터를 빠르게 탐색하는 자료구조를 의미한다. (+ 즉, 해시 테이블을 활용하면
* 데이터를 빠르게 탐색하는 것이 가능하다.)
*
* 해시 테이블은 이진 탐색 트리와 같이 데이터를 추가 할 때 미리 계산 된 위치에 추가함으로서 데이터를
* 빠르게 탐색하는 자료구조이다.
*
* 해시 테이블은 내부적인 구현 방법에 따라 개방 주소법 (Open Address) 과 체인법 (Chaining) 으로
* 구분 된다.
*
* 해시 테이블 관련 주요 용어
* - 충돌				<- 동일한 해시 값이 나오는 현상
* - 클러스터			<- 데이터가 특정 부분에 밀집 되어 있는 현상
*
* 이진 탐색 트리 (Binary Search Tree) vs 해시 테이블 (Hash Table)
* - 이진 탐색 트리는 최선의 경우 든 최악의 경우 든 O(logN) 의 성능을 보장하기 때문에 안정적이라는
* 장점이 존재한다.
*
* 단, 이진 탐색 트리는 균형이 무너졌을 경우 성능이 O(N) 으로 떨어지기 때문에 데이터가 추가 되거나
* 제거 될 때 균형이 무너지지 않게 추가적인 연산이 필요하다. (+ 즉, 데이터가 빈번하게
* 추가/제거 될 경우 성능이 떨어진다는 것을 알 수 있다.)
*
* 반면 해시 테이블은 최선의 경우 O(1) 로 빠르게 데이터를 탐색하는 것이 가능하다. (+ 즉,
* 한번이 비교로 데이터의 존재 여부를 파악하는 것이 가능하다.)
*
* 단, 해시 테이블은 내부적으로 충돌이 많이 발생하면 탐색 성능이 O(N) 으로 떨어지는
* 단점이 있기 때문에 충돌을 최소화 시키기 위해서 많은 메모리를 요구한다. (+ 즉, 메모리가
* 부족한 환경에서는 사용이 불가능하다는 것을 알 수 있다.)
*/

/** Example 29 */
int E01Example_29(int argc, char* args[]);
