#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 반복문이란?
* - 조건을 만족 할 동안 명령문의 일부 or 전체를 반복해서 실행 시키는 기능을 의미한다. (+ 즉,
* 반복문을 활용하면 프로그램의 흐름을 특정 구간에 잡아두는 것이 가능하다.)
*
* C 로 제작 된 프로그램은 메인 메서드가 종료 되면 프로그램도 종료 되기 때문에
* 영구적으로 실행 되는 프로그램을 제작하기 위해서는 메인 메서드가 종료 되지 않게 프로그램의 흐름을
* 제어 할 필요가 있다. (+ 즉, 반복문을 활용하면 영구적으로 실행되는 프로그램을 제작하는 것이
* 가능하다.)
*
* C 반복문 종류
* - while
* - for
* - do ~ while			<- 사후 판단 반복문
*
* Ex)
* while(조건) {
* 		// Do Something
* }
*
* for(초기절; 조건절; 반복절) {
* 		// Do Something
* }
*
* do {
* 		// Do Something
* } while(조건)
*
* while 계열 반복문 vs for 계열 반복문
* - while 계열 반복문은 대부분의 프로그래밍 언어에서 지원하는 기본적인 반복문으로서
* 단순한 문법으로 인해 직관적이지만 실수 할 수 있는 여지가 많다는 단점이 존재한다. (+ Ex.
* 무한 루프 등등...)
*
* 반면 for 계열 반복문은 while 계열 반복문에 비해 문법이 복잡해서 직관성이 떨어지지만
* while 계열 반복문에 비해 실수 할 수 있는 여지가 적다는 장점이 존재한다.
*
* 따라서 대부분의 사용자 (프로그래머) 는 while 계열 반복문보다 for 계열 반복문을 좀 더 선호한다.
*
* 단, 모든 상황에서 for 계열 반복문이 적합한 것은 아니며 for 계열 반복문은 반복 할 횟수가
* 명확 할 때 사용하는 것이 일반적이다. (+ 즉, 반복 할 횟수를 알 수 없을 경우
* while 계열 반복문이 적합하다는 것을 알 수 있다.)
*
* 사전 판단 반복문 vs 사후 판단 반복문
* - 사전 판단 반복문은 조건을 먼저 검사 후 반복 할 명령문을 실행하기 때문에 처음부터 조건이
* 거짓이라면 반복 할 명령문이 한번도 실행되지 않는 특징이 존재한다.
*
* 반면 사후 판단 반복문은 반복 할 명령문을 먼저 실행 후 조건을 검사하기 때문에 처음부터 조건이
* 거짓이더라도 한번 이상 반복 할 명령문이 실행되는 차이점이 존재한다. (+ 즉, 사후 판단 반복문은
* 반복 할 명령문이 반드시 한번은 실행 된다는 것을 알 수 있다.)
*/

/** Example 6 */
int E01Example_06(int argc, char* args[]);
