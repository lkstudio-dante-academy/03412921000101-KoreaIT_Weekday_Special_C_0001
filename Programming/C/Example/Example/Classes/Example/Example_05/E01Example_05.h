#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 조건문이란?
* - 프로그램의 흐름을 제어하는 제어문 중 하나로서 주어진 조건에 따라 프로그램의 흐름을 
* 분산 시키는 기능을 의미한다. (+ 즉, 조건문을 활용하면 다양한 결과를 출력하는 프로그램을 
* 제작하는 것이 가능하다.)
*
* C/C++ 조건문 종류
* - if ~ else
* - switch ~ case
*
* Ex)
* if(조건 A) {
* 		// 조건 A 를 만족 할 경우 실행 할 명령문
* } else if(조건 B) {
* 		// 조건 B 를 만족 할 경우 실행 할 명령문
* } else {
* 		// 조건 A 와 조건 B 를 만족하지 않을 경우 실행 할 명령문
* }
*
* switch(조건 데이터) {
* 		case 조건 A:
* 			// 조건 A 를 만족 할 경우 실행 할 명령문
*
* 		case 조건 B:
* 			// 조건 B 를 만족 할 경우 실행 할 명령문
*
* 		default:
* 			// 조건 A 와 조건 B 를 만족하지 않을 경우 실행 할 명령문
* }
*
* 위와 같이 C/C++ 는 if ~ else 조건문과 switch ~ case 조건문을 지원하며 만약 여러 조건문을 
* 만족 할 경우 가장 먼저 만족한 조건문에 해당하는 명령문만 실행 된다는 특징이 존재한다. (+ 즉, 
* 조건문은 위에서 아래 방향으로 순차적으로 검사 된다는 것을 알 수 있다.)
*
* if ~ else 조건문 vs switch ~ case 조건문
* - if ~ else 조건문은 다양한 연산자를 활용해서 복잡한 조건을 검사하는 것이 가능하다. (+ 즉,
* 관계 연산자와 같이 결과 데이터가 참 or 거짓이 반환 되는 모든 연산자를 사용 할 수 있다.)
*
* 단, if ~ else 조건문은 여러 조건문이 존재 할 경우 항상 처음부터 순차적으로 검사를 수행하기 때문에
* switch ~ case 조건문에 비해 조건문을 비교하는 횟수가 많다는 단점이 존재한다.
*
* 반면 switch ~ case 조건문은 단순한 동등 비교만 가능하지만 if ~ else 조건문에 비해 
* C/C++ 컴파일러에 의해 명령문이 최적화 될 여지가 있다는 장점이 존재한다. (+ 즉, 
* switch ~ case 조건문이 if ~ else 조건문에 비해 빠르게 동작 할 수 있다는 것을 의미한다.)
*
* if vs else if
* - if 문은 서로 다른 조건문이지만 else if 는 같은 조건문이라는 차이점이 존재한다. (+ 즉, if 문을
* 연속으로 작성 할 경우 각 if 문은 별개의 조건문이라 조건을 모두 만족 할 경우 각 if 문에 존재하는 
* 명령문이 모두 실행 되는 반면 else if 문은 같은 조건문이기 때문에 가장 먼저 조건을 만족한 명령문만 
* 실행 된다는 것을 알 수 있다.)
*
* Ex)
* int nVal = 10;
*
* if(nVal >= 5) {
* 		// Do Something
* }
*
* if(nVal >= 10) {
* 		// Do Something
* }
*
* 위의 경우 if 문은 서로 다른 조건문이기 때문에 첫 번째 조건문과 두 번째 조건문에 존재하는 명령문이
* 모두 실행 된다는 것을 알 수 있다.
*
* if(nVal >= 5) {
* 		// Do Something
* } else if(nVal >= 10) {
* 		// Do Something
* }
*
* 반면 else if 문은 같은 조건문이기 때문에 먼저 조건을 만족 한 첫 번째 조건문에 존재하는 명령문만
* 실행 된다는 것을 알 수 있다.
*/

/** Example 5 */
int E01Example_05(int argc, char* args[]);
