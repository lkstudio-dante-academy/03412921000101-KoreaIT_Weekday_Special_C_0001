/*
* #pragma once 명령어란?
* - 파일이 #include 명령어에 의해 파일이 중복으로 포함되는 것을 방지하는 역할을 수행하는
* 명령어를 의미한다. (+ 즉, #pragma once 명령어를 활용하면 특정 파일을 여러 번 중복으로
* 포함 시켜도 에러가 발생하지 않는다는 것을 알 수 있다.)
*/
#pragma once

#include "../../../Classes/Global/Define/KDefine+Global.h"

/*
* 프로그래밍 언어 (Programming Language) 란?
* - 컴퓨터에게 작업을 지시하기 위한 프로그램을 제작 할 수 있는 언어를 의미한다. (+ 즉,
* 프로그래밍 언어는 컴퓨터와 대화를 하기 위한 수단이라는 것을 알 수 있다.)
*
* 프로그래밍 언어는 다양한 종류가 존재하며 크게 저수준 언어와 고수준 언어로 분류된다.
*
* 저수준 언어는 컴퓨터가 이해하기 쉬운 언어를 의미하며 고수준 언어는
* 사람이 이해하기 쉬운 언어를 의미한다.
*
* 저수준 언어 (Low Level Language) 종류
* - 기계어
* - 어셈블리어
*
* 고수준 언어 (High Level Language) 종류
* - C/C++
* - C#
* - Java
* - Python
* - 등등...
*
* 위와 같이 프로그래밍 언어는 여러 종류가 존재하며 C/C++ 과 같은 대중적인 언어는
* 고수준 언어에 속한다는 것을 알 수 있다.
*
* 프로그래밍 언어를 활용하면 컴퓨터에게 작업을 지시하는 것이 가능하지만
* 컴퓨터는 0 과 1 로 이루어진 기계어 만을 이해 할 수 있다. (+ 즉, C/C++ 과 같은 고수준 언어로
* 작성 된 명령문은 컴퓨터가 이해하지 못한다는 것을 알 수 있다.)
*
* 따라서 기계어 이외의 언어로 작성 된 명령문을 컴퓨터가 이해 할 수 있게 기계어로
* 변환 해 줄 필요가 있으며 이러한 작업을 수행하는 프로그램을 컴파일러라고 한다. (+ 즉,
* 컴파일러는 사람과 컴퓨터 간에 언어를 번역해주는 통역사라는 것을 알 수 있다.)
*
* C/C++ 프로그램 제작 주요 단계 과정
* - 전처리 단계
* - 컴파일 단계
* - 링크 단계
*
* 전처리 (Preprocess) 단계란?
* - C/C++ 로 작성 된 명령문을 기계어로 변환하기 전에 명령문을 튜닝하는 단계를 의미한다. (+ 즉,
* 전처리 단계를 거치고 나면 C/C++ 로 작성 된 명령문이 변경 될 수 있다는 것을 알 수 있다.)
*
* 전처리 단계는 전처리기 (Preprocessor) 에 의해서 처리되며 전처리는 C/C++ 의 영역이 아니기 때문에
* 다른 규칙의 문법을 사용하며 모든 명령문이 # 으로 시작하는 특징이 존재한다.
*
* 컴파일 (Compile) 단계란?
* - C/C++ 로 작성 된 명령문을 기계어로 변환하는 단계를 의미한다. (+ 즉, 컴파일 단계를 거치고 나면
* 기계어로 C/C++ 로 작성 된 명령문이 기계어로 변환 된다는 것을 알 수 있다.)
*
* 컴파일은 파일 단위로 동작하며 기계어로 변환 된 결과도 파일 개수와 동일하다. (+ 즉,
* C/C++ 명령문으로 작성 된 파일이 10 개라면 기계어로 변환 된 파일도 10 개가 만들어진다는 것을
* 알 수 있다.)
*
* C/C++ 로 작성 된 명령문에 문제가 있을 경우 에러가 발생하며 이렇게 컴파일 단계에서 발생하는 에러를
* 컴파일 에러라고 한다.
*
* 링크 (Link) 단계란?
* - 기계어로 변환 된 파일을 하나로 묶어서 프로그램을 제작해주는 단계를 의미한다. (+ 즉,
* 링크 단계를 거치고 나면 프로그램 파일이 생성 된다는 것을 알 수 있다.)
*
* 위와 같이 C/C++ 로 작성 된 명령문을 기반으로 프로그램을 제작하기 위해서는 여러 단계를
* 거친다는 것을 알 수 있다.
*/

/** Example 1 */
int E01Example_01(int argc, char* args[]);
