#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 함수 (Function) 란?
* - C 로 작성 된 명령문 일부 or 전체를 따로 떼어내서 재사용 할 수 있는 기능을 의미한다. (+ 즉,
* 함수를 활용하면 중복적으로 발생하는 명령문을 최소화 시키는 것이 가능하다.)
* 
* C 의 함수는 수학의 함수와 달리 입력과 출력이 존재하거나 없을 수 있다. (+ 즉, 
* C 의 함수는 입력과 출력이 필수가 아니라는 것을 의미한다.)
* 
* C 함수 유형
* - 입력 O, 출력 O			<- int SomeFunc(int a_nValA, int a_nValB);
* - 입력 O, 출력 X			<- void SomeFunc(int a_nValA, int a_nValB);
* - 입력 X, 출력 O			<- int SomeFunc(void);
* - 입력 X, 출력 X			<- void SomeFunc(void);
* 
* 위와 같이 C 의 함수는 입력과 출력의 존재 여부에 따라 4 가지 유형이 존재한다는 것을 
* 알 수 있다.
* 
* C 함수 선언 방법
* - 반환형 + 함수 이름 + 매개 변수
* 
* Ex)
* int SomeFunc(int a_nValA, int a_nValB);
* 
* 위와 같이 함수의 원형 (Prototype) 만 명시하는 것으로 특정 함수를 선언하는 것이 가능하다.
* 
* C 함수 구현 방법
* - 반환형 + 함수 이름 + 매개 변수 + 함수 몸체
* 
* Ex)
* int SomeFunc(int a_nValA, int a_nValB) {
*		return a_nValA + a_nValB;
* }
* 
* 위와 같이 { } 기호를 통해 함수가 호출 될 때 동작 할 명령문을 작성하는 것으로 함수를 구현하는 것이
* 가능하다. (+ 즉, { } 기호와 내부에 작성 된 명령문을 함수의 몸체라고 한다는 것을 알 수 있다.)
* 
* 함수 내부에 작성 된 명령문은 함수를 호출하는 것으로 실행 시키는 것이 가능하다. (+ 즉, 
* 함수가 호출 되지 않으면 함수 내부에 작성 된 명령문은 실행 되지 않는다는 것을 의미한다.)
* 
* 함수 선언 vs 함수 구현
* - 함수 선언은 함수의 존재 여부를 C 컴파일러에게 알리는 역할을 수행한다. (+ 즉,
* 함수 선언은 단순히 특정 함수가 존재한다는 사실을 C 컴파일러에게 알리는 것이기 때문에
* 중복을 허용한다는 것을 알 수 있다.)
* 
* 따라서 함수 선언을 활용하면 다른 파일에 구현 된 함수를 호출하는 것이 가능하다. (+ 즉,
* 함수 선언을 헤더 파일에 작성 후 해당 파일을 #include 명령어를 통해 함수 선언을 가져옴으로서
* 특정 함수의 존재 여부를 다른 파일에 공유하는 것이 가능하다.)
* 
* 단, 함수 선언은 단순히 함수의 존재 여부를 알리는 것이기 때문에 구현 되지 않는 함수를 호출 할 경우
* 링크 단계에서 문제가 발생한다. (+ 즉, 링크 에러가 발생한다는 것을 의미한다.)
* 
* 함수 구현은 함수가 호출 되었을 때 어떤 명령문이 실행 될지를 정의하는 역할을 수행한다.
* 따라서 함수 구현은 중복이 불가능하며 소스 파일 (.c or .cpp) 파일에 작성하는 것이 일반적이다.
* 
* 함수 선언이 필요한 주요 상황
* - 다른 파일에 구현 된 함수를 호출 할 경우
* - 같은 파일에 존재하는 함수를 순서에 상관 없이 호출 해야 될 경우
* 
* Ex)
* void SomeFuncA(void) {
*		SomeFuncB();
* }
* 
* void SomeFuncB(void) {
*		SomeFuncC();
* }
* 
* void SomeFuncC(void) {
*		SomeFuncA();
* }
* 
* 위와 같이 동일한 파일에 구현 된 함수를 호출하는 경우에도 함수의 선언이 필요 할 때가 있다.
* 
* C 컴파일러는 위에서 아래 방향으로 명령문을 해석하기 때문에 특정 함수를 호출하기 전에
* 해당 함수의 구현이 이전 명령문에 존재하지 않을 경우 컴파일 에러가 발생한다. (+ 즉, 
* 위의 경우 SomeFuncB 함수 구현이 해당 함수 호출 이후에 존재하기 때문에
* 컴파일 에러가 발생한다는 것을 알 수 있다.)
* 
* 따라서 동일한 파일에 구현 된 함수를 순서에 상관 없이 호출하고 싶다면 함수 선언을 활용해야한다.
* (+ 즉, 함수 선언을 파일 상단에 작성함으로서 C 컴파일러에게 함수의 존재 여부를 알린다는 것을
* 의미한다.)
* 
* 함수를 활용하는 주요 이유
* - 명령문의 중복 최소화
* - 사용법을 익히는 것만으로 명령문 재사용 가능
*/

/** Example 11 */
int E01Example_11(int argc, char* args[]);
