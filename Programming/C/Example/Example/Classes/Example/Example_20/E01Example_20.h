#pragma once

#include "../../Global/Define/KDefine+Global.h"

/*
* 동적 할당 (Dynamic Allocation) 이란?
* - 프로그램이 실행 중에 메모리를 추가적으로 할당해서 사용 할 수 있는 기능을 의미한다. (+ 즉,
* 동적 할당을 활용하면 런타임에 필요한만큼 메모리를 추가적으로 사용하는 것이 가능하다.)
*
* 동적 할당 된 메모리는 힙 영역에 할당 되며 해당 영역에 할당 된 메모리에 접근하고 싶다면
* 포인터를 활용해야한다. (+ 즉, 동적 할당 된 메모리는 포인터를 통해서만 제어가 가능하다는 것을
* 의미한다.)
*
* C 동적 할당 함수 종류
* - malloc
* - calloc
* - realloc
*
* 위와 같이 C 에서 동적 할당을 위한 함수는 3 개가 존재하며 realloc 함수를 제외한 나머지 두 함수는
* 새로운 메모리를 힙 영역에 할당 할 때 사용하는 함수이다.
*
* realloc 함수는 기존에 동적 할당 된 메모리의 크기를 변경 할 때 사용하는 함수이기 때문에 단독으로
* 사용하는 것은 불가능하다. (+ 즉, 기존 동적 할당 된 메모리를 대상으로 사용하는 함수라는 것을
* 의미한다.)
*
* C 로 제작 된 프로그램의 메모리 영역 종류
* - 스택 (Stack)
* - 힙 (Heap)
* - 데이터 (Data)
* - 코드 (Code)
*
* 위와 같이 C 로 제작 된 프로그램의 메모리는 4 개의 영역으로 구분 되며 이 중 동적 할당 된 메모리는
* 힙 영역에 할당 된다.
*
* 힙 (Heap) 영역이란?
* - 프로그램이 실행 중에 추가적으로 할당 가능한 메모리 영역을 의미하며 해당 영역에 할당 된 메모리는
* 사용자 (프로그래머) 에 의해서 관리 된다. (+ 즉, 힙 영역은 시스템에 의해서 관리 되지 않는다는 것을
* 의미한다.)
*
* 힙 영역에 할당 된 메모리는 사용자에 의해서 관리 되기 때문에 사용을 완료 한 메모리는 반드시
* 해제 할 필요가 있다. (+ 즉, 메모리는 컴퓨터의 자원이기 때문에 사용을 완료 했다면 반드시 컴퓨터에게
* 반환 해야한다는 것을 알 수 있다.)
*
* C 동적 할당 메모리 해제 방법
* - free 함수 사용
*
* 위와 같이 동적 할당 된 메모리를 해제하고 싶다면 free 함수를 활용하면 된다.
*
* free 함수는 힙 영역에 할당 된 메모리를 컴퓨터에게 돌려주는 역할을 수행하기 때문에 사용이 완료 된
* 메모리는 반드시 해당 함수를 활용해서 컴퓨터에게 메모리를 반환 해야한다.
*
* 만약 free 함수를 통해 메모리를 컴퓨터에게 반환하지 않았을 경우 사용 되지 않는 메모리가 늘어나는
* 메모리 릭 (Memory Leak) 현상이 발생한다.
*
* 메모리 릭이 발생하면 프로그램에서 사용 가능한 메모리 용량이 줄어 들기 때문에 이를 방치하면
* 필요한 순간 메모리 부족으로 인해 동적 할당이 실패 할 수 있다.
*
* 따라서 힙 영역에 할당 된 메모리가 더이상 사용 되지 않을 경우 free 함수를 통해
* 반드시 사용 되지 않는 메모리를 해제해줘야한다.
*/

/** Example 20 */
int E01Example_20(int argc, char* args[]);
